# coding: utf-8
from __future__ import unicode_literals

from .common import InfoExtractor
from ..compat import compat_b64decode
from ..utils import (
    try_get,
    parse_iso8601,
    parse_duration,
    parse_resolution,
)


class MicrosoftStreamIE(InfoExtractor):
    IE_NAME = 'microsoftstream'
    IE_DESC = 'Microsoft Stream'
    _VALID_URL = r'https?://(?:web|www|msit)\.microsoftstream\.com/video/(?P<id>[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12})'

    _TESTS = [{
        'url': 'https://web.microsoftstream.com/video/6e51d928-4f46-4f1c-b141-369925e37b62?list=user&userId=f5491e02-e8fe-4e34-b67c-ec2e79a6ecc0',
        'only_matching': True,
    }, {
        'url': 'https://msit.microsoftstream.com/video/b60f5987-aabd-4e1c-a42f-c559d138f2ca',
        'only_matching': True,
    }]

    def _real_extract(self, url):
        video_id = self._match_id(url)
        webpage = self._download_webpage(url, video_id)
        if '<title>Microsoft Stream</title>' not in webpage:
            self.raise_login_required()

        access_token = self._html_search_regex(r'"AccessToken":"(.+?)"', webpage, 'access token')
        api_url = self._html_search_regex(r'"ApiGatewayUri":"(.+?)"', webpage, 'api url')

        headers = {'Authorization': 'Bearer ' + access_token}

        video_data = self._download_json(
            '%s/videos/%s' % (api_url, video_id), video_id,
            headers=headers, query={
                '$expand': 'creator,tokens,status,liveEvent,extensions',
                'api-version': '1.4-private'
            })

        video_id = video_data.get('id') or video_id

        thumbnails = []
        for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):
            thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'])
            if thumbnail_url is None:
                continue
            thumb = {
                'id': thumbnail_id,
                'url': thumbnail_url,
            }
            thumb_name = thumbnail_url.split('?')[0].split('/')[-1]
            thumb_name = str(compat_b64decode(thumb_name + '=' * (len(thumb_name) % 4)))
            thumb.update(parse_resolution(thumb_name))
            thumbnails.append(thumb)

        formats = []
        for playlist in video_data['playbackUrls']:
            if playlist['mimeType'] == 'application/vnd.apple.mpegurl':
                formats.extend(self._extract_m3u8_formats(
                    playlist['playbackUrl'], video_id,
                    ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls',
                    fatal=False, headers=headers))
            elif playlist['mimeType'] == 'application/dash+xml':
                formats.extend(self._extract_mpd_formats(
                    playlist['playbackUrl'], video_id, mpd_id='dash',
                    fatal=False, headers=headers))
            elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':
                formats.extend(self._extract_ism_formats(
                    playlist['playbackUrl'], video_id, ism_id='mss',
                    fatal=False, headers=headers))
        self._sort_formats(formats)

        subtitles = {}
        automatic_captions = {}
        text_tracks = self._download_json(
            '%s/videos/%s/texttracks' % (api_url, video_id), video_id,
            'Downloading subtitles JSON', headers=headers,
            query={
                'api-version': '1.4-private'
            }).get('value')
        for track in text_tracks:
            if track.get('language') is not None and track.get('url') is not None:
                if track.get('autoGenerated'):
                    automatic_captions.setdefault(track.get('language'), []).append({
                        'ext': 'vtt',
                        'url': track.get('url')
                    })
                else:
                    subtitles.setdefault(track.get('language'), []).append({
                        'ext': 'vtt',
                        'url': track.get('url')
                    })

        return {
            'id': video_id,
            'title': video_data['name'],
            'description': video_data.get('description'),
            'uploader': video_data.get('creator').get('name'),
            'uploader_id': video_data.get('creator', {}).get('mail') or video_data.get('creator', {}).get('id'),
            'thumbnails': thumbnails,
            'subtitles': subtitles,
            'automatic_captions': automatic_captions,
            'language': video_data.get('language'),
            'timestamp': parse_iso8601(video_data.get('created')),
            'duration': parse_duration(video_data.get('media', {}).get('duration')),
            'webpage_url': 'https://web.microsoftstream.com/video/%s' % video_id,
            'view_count': video_data.get('metrics', {}).get('views'),
            'like_count': video_data.get('metrics', {}).get('likes'),
            'comment_count': video_data.get('metrics', {}).get('comments'),
            'formats': formats,
        }
